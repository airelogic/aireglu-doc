import{_ as e,c as t,o as a,a4 as r}from"./chunks/framework.ttppV29E.js";const s="/assets/http-requestv2.BffaaiAl.png",i="/assets/http-request-headersv2.C-v7GsTD.png",o="/assets/http-request-certsv2.9o3n5Boi.png",b=JSON.parse('{"title":"HTTP Request Task","description":"","frontmatter":{},"headers":[],"relativePath":"docs/endpoints/http-request.md","filePath":"docs/endpoints/http-request.md","lastUpdated":1753884329000}'),n={name:"docs/endpoints/http-request.md"},d=r('<h1 id="http-request-task" tabindex="-1">HTTP Request Task <a class="header-anchor" href="#http-request-task" aria-label="Permalink to &quot;HTTP Request Task&quot;">​</a></h1><p>The HTTP Request task is used to communicate with external services. You can use this to send data to your APIs, or fetch data from other sources.</p><p><img src="'+s+'" alt="RequestTask"></p><h3 id="creating-a-request" tabindex="-1">Creating a Request <a class="header-anchor" href="#creating-a-request" aria-label="Permalink to &quot;Creating a Request&quot;">​</a></h3><p>Creating a simple request is straightforward. The <code>URL</code> field is the request address, with the HTTP method defined to its right. The following HTTP Verbs are accepted: <code>POST</code>, <code>GET</code>, <code>PATCH</code>, <code>PUT</code>, <code>DELETE</code>, <code>HEAD</code>, <code>OPTIONS</code>, and <code>TRACE</code>. The payload can be provided by URL query string, or by body content.</p><h3 id="retry-external-requests-on-failure" tabindex="-1">Retry external requests on failure <a class="header-anchor" href="#retry-external-requests-on-failure" aria-label="Permalink to &quot;Retry external requests on failure&quot;">​</a></h3><p>If selected, AireGlu will automatically retry the request if it fails due to temporary issues like network problems or server unavailability. It will not retry for errors like authentication failures or invalid input, and will not retry calls to other AireGlu endpoints.</p><p>The request will be retried 5 times (in addition to the initial request) with a starting delay of 2 seconds and an exponential backoff.</p><h3 id="headers" tabindex="-1">Headers <a class="header-anchor" href="#headers" aria-label="Permalink to &quot;Headers&quot;">​</a></h3><p>Some requests may require additional headers to work correctly. E.g. for authentication. By expanding the Headers section, you can add headers to the request. The <code>Header</code> field contains the Key, and one or more values can be added.</p><p><img src="'+i+'" alt="RequestTask"></p><h3 id="certificates" tabindex="-1">Certificates <a class="header-anchor" href="#certificates" aria-label="Permalink to &quot;Certificates&quot;">​</a></h3><p>Certificates are used for client authentication via Mutual TLS. For the most part, this is not required, but some services may need this. Due to a current issue, you should enter the password for the certificate first, then upload the certificate file itself. The client certificate should be bundled with the private key in a PKCS#12 ( or .pfx) format, and it should be password protected.</p><p>Certificates can be store in two ways:</p><ol><li>Within the endpoint definition itself (certificate type - <code>File</code>)</li><li>Stored as an AireGlu <a href="./../getting-started/secrets.html">Secret</a> and referenced in the <code>Secret</code> field</li></ol><p><img src="'+o+'" alt="RequestTask"></p><h3 id="stream-response" tabindex="-1">Stream Response <a class="header-anchor" href="#stream-response" aria-label="Permalink to &quot;Stream Response&quot;">​</a></h3><p>It is now possible to receive binary streams from an HTTP Request task, such as when requesting content with media types like <code>image/jpeg</code> or <code>application/pdf</code>.</p><h4 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;Limitations&quot;">​</a></h4><ul><li>Streams from an HTTP Request task cannot currently be mapped into another task.</li><li>To return a binary stream from your endpoint, the HTTP Request task must be the final output of the endpoint&#39;s execution pipeline.</li></ul>',20),c=[d];function l(h,u,p,f,m,q){return a(),t("div",null,c)}const _=e(n,[["render",l]]);export{b as __pageData,_ as default};
