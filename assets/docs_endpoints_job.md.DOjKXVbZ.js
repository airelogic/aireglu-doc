import{_ as e,c as t,o as a,a4 as o}from"./chunks/framework.ttppV29E.js";const n="/assets/job-data.BgbK9jRZ.png",s="/assets/job-schedule.CYQdEEWl.png",_=JSON.parse('{"title":"Job Tasks","description":"","frontmatter":{},"headers":[],"relativePath":"docs/endpoints/job.md","filePath":"docs/endpoints/job.md","lastUpdated":1751642949000}'),i={name:"docs/endpoints/job.md"},r=o('<h1 id="job-tasks" tabindex="-1">Job Tasks <a class="header-anchor" href="#job-tasks" aria-label="Permalink to &quot;Job Tasks&quot;">​</a></h1><p>There are three tasks for Job management:</p><ul><li>Create Job</li><li>Update Job Schedule</li><li>Delete Job</li></ul><blockquote><p>The three Jobs tasks in the new (v2) editor are combined into one task into the existing (v1) editor</p></blockquote><p>The Job tasks give you the ability to create, update and delete jobs from within an Endpoint instead of manually via the <a href="/docs/getting-started/jobs.html">Jobs page</a>. This allows you to automatically create, update or delete jobs as needed.</p><h2 id="create-job" tabindex="-1">Create Job <a class="header-anchor" href="#create-job" aria-label="Permalink to &quot;Create Job&quot;">​</a></h2><p><img src="'+n+'" alt="Creating a job"><br> On <code>Job Settings</code> you can name the job, select the endpoint you want to run and what data it should have. You can also set <code>Disable on failure</code>, to turn the job off if the endpoint errors when run. You can always turn it back on manually later. When defining the job name, you should try and ensure it will be unique. One way to do this is use a randomly generated GUID function from the Functions area of the toolbox, as in this example. The name and the endpoint data can both accept fields from the toolbox.</p><p>On the <code>Schedule</code> tab, set the schedule.</p><p><img src="'+s+'" alt="Creating a job"><br> For setting the schedule, you can either use the Visual Editor to set a pattern, or use a <a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="noreferrer">cron expression</a>. Cron expressions are in the standard Linux format. For advanced use cases, you can define the schedule using fields from the toolbox as well.</p><h2 id="update-job-schedule" tabindex="-1">Update Job Schedule <a class="header-anchor" href="#update-job-schedule" aria-label="Permalink to &quot;Update Job Schedule&quot;">​</a></h2><p>To update a job schedule you must specify the name of a job that will already exist when the endpoint runs. Then set the schedule as you would when creating a new job.</p><h2 id="delete-job" tabindex="-1">Delete Job <a class="header-anchor" href="#delete-job" aria-label="Permalink to &quot;Delete Job&quot;">​</a></h2><p>To delete a job you must simply enter the name of that job. Like creating a job, this can include data fields from the toolbox.</p>',13),d=[r];function l(h,c,u,b,p,m){return a(),t("div",null,d)}const j=e(i,[["render",l]]);export{_ as __pageData,j as default};
