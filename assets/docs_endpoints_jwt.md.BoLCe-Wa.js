import{_ as e,c as t,o as a,a4 as i}from"./chunks/framework.ttppV29E.js";const y=JSON.parse('{"title":"JWT Task","description":"","frontmatter":{},"headers":[],"relativePath":"docs/endpoints/jwt.md","filePath":"docs/endpoints/jwt.md","lastUpdated":1755869854000}'),n={name:"docs/endpoints/jwt.md"},s=i(`<h1 id="jwt-task" tabindex="-1">JWT Task <a class="header-anchor" href="#jwt-task" aria-label="Permalink to &quot;JWT Task&quot;">​</a></h1><p>The JWT task allows you to generate a JWT with customisable headers &amp; payload, with a choice of encryption and/or signing algorithms.</p><h2 id="rs256-rs512-signed-tokens" tabindex="-1">RS256/RS512 (Signed Tokens) <a class="header-anchor" href="#rs256-rs512-signed-tokens" aria-label="Permalink to &quot;RS256/RS512 (Signed Tokens)&quot;">​</a></h2><h3 id="what-it-does" tabindex="-1">What it does: <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does:&quot;">​</a></h3><ul><li><strong>Signs</strong> the token using asymmetric cryptography (RSA)</li><li>Ensures authenticity and integrity (proves who created it and that it hasn&#39;t been tampered with)</li><li>Token content is readable by anyone (just Base64 encoded)</li></ul><h3 id="how-it-works" tabindex="-1">How it works: <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it works:&quot;">​</a></h3><ul><li>Uses RSA private key to sign</li><li>Uses RSA public key to verify</li><li>RS256 uses SHA-256 hash, RS512 uses SHA-512 hash</li></ul><h3 id="security" tabindex="-1">Security: <a class="header-anchor" href="#security" aria-label="Permalink to &quot;Security:&quot;">​</a></h3><ul><li>✅ Tamper-proof - can detect if token was modified</li><li>✅ Verified source - proves who signed it</li><li>❌ Not confidential - anyone can read the payload</li></ul><h2 id="aes128-hs256-signed-encrypted-tokens" tabindex="-1">AES128-HS256 (Signed &amp; Encrypted Tokens) <a class="header-anchor" href="#aes128-hs256-signed-encrypted-tokens" aria-label="Permalink to &quot;AES128-HS256 (Signed &amp; Encrypted Tokens)&quot;">​</a></h2><h3 id="what-it-does-1" tabindex="-1">What it does: <a class="header-anchor" href="#what-it-does-1" aria-label="Permalink to &quot;What it does:&quot;">​</a></h3><ul><li>Encrypts the entire token content (confidentiality)</li><li>Signs the encrypted token (authenticity &amp; integrity)</li><li>Token content is hidden from everyone except authorised parties</li></ul><h3 id="how-it-works-1" tabindex="-1">How it works: <a class="header-anchor" href="#how-it-works-1" aria-label="Permalink to &quot;How it works:&quot;">​</a></h3><ul><li>Uses AES-128 to encrypt the payload</li><li>Uses HMAC-SHA256 to sign the encrypted result</li><li>Requires shared secret keys for both operations</li></ul><h3 id="security-1" tabindex="-1">Security: <a class="header-anchor" href="#security-1" aria-label="Permalink to &quot;Security:&quot;">​</a></h3><ul><li>✅ Tamper-proof - can detect modifications</li><li>✅ Confidential - payload is encrypted and unreadable</li><li>✅ Authenticated - proves origin and integrity</li><li>⚠️ Uses symmetric keys (same key for encrypt/decrypt)</li></ul><h2 id="unsigned-tokens-none" tabindex="-1">Unsigned Tokens (none) <a class="header-anchor" href="#unsigned-tokens-none" aria-label="Permalink to &quot;Unsigned Tokens (none)&quot;">​</a></h2><h3 id="what-it-does-2" tabindex="-1">What it does: <a class="header-anchor" href="#what-it-does-2" aria-label="Permalink to &quot;What it does:&quot;">​</a></h3><ul><li>Creates a token with no cryptographic protection</li><li>Payload is readable and can be modified by anyone</li></ul><h3 id="security-2" tabindex="-1">Security: <a class="header-anchor" href="#security-2" aria-label="Permalink to &quot;Security:&quot;">​</a></h3><ul><li>❌ No tamper protection</li><li>❌ No source verification</li><li>❌ Not confidential</li><li>⚠️ Only use for testing/development</li></ul><h2 id="when-to-use-which-algorithm" tabindex="-1">When to Use Which Algorithm <a class="header-anchor" href="#when-to-use-which-algorithm" aria-label="Permalink to &quot;When to Use Which Algorithm&quot;">​</a></h2><p><strong>RS256/RS512:</strong> When you need to verify tokens but payload isn&#39;t sensitive (user IDs, permissions)</p><p><strong>AES128-HS256:</strong> When the token contains sensitive data that shouldn&#39;t be readable</p><p><strong>None:</strong> Development/testing only - never in production</p><h1 id="adding-the-signing-secret" tabindex="-1">Adding the Signing Secret <a class="header-anchor" href="#adding-the-signing-secret" aria-label="Permalink to &quot;Adding the Signing Secret&quot;">​</a></h1><h3 id="for-rs256-rs512-rsa-algorithms" tabindex="-1">For RS256/RS512 (RSA algorithms) <a class="header-anchor" href="#for-rs256-rs512-rsa-algorithms" aria-label="Permalink to &quot;For RS256/RS512 (RSA algorithms)&quot;">​</a></h3><ul><li>Format: Base64-encoded RSA private key WITHOUT headers</li><li>The system automatically adds PEM headers</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-----BEGIN PRIVATE KEY----- </span></span>
<span class="line"><span>  [your base64 content here]</span></span>
<span class="line"><span>-----END PRIVATE KEY-----</span></span></code></pre></div><ul><li>Add the base64 content to an <a href="./../getting-started/secrets.html">AireGlu secret</a></li><li>In the signing secret field from the drop down select the secret</li></ul><h3 id="for-aes128hs256" tabindex="-1">For AES128HS256 <a class="header-anchor" href="#for-aes128hs256" aria-label="Permalink to &quot;For AES128HS256&quot;">​</a></h3><ul><li><strong>Signing Secret:</strong> Plain text string (recommended: 32+ characters for security)</li><li><strong>Encryption Secret:</strong> Plain text string (recommended: 16+ characters for AES-128)</li><li>Both strings are converted to bytes using ASCII encoding</li><li>Add the signing secret and encryption secret to an <a href="./../getting-started/secrets.html">AireGlu secret</a></li><li>In the signing secret and encryption secret fields, select the respective secrets from the dropdown</li></ul>`,32),o=[s];function r(l,h,d,c,u,p){return a(),t("div",null,o)}const m=e(n,[["render",r]]);export{y as __pageData,m as default};
