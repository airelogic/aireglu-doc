import{_ as e,c as t,o as a,a4 as i}from"./chunks/framework.ttppV29E.js";const o="/assets/data-tree.KQrsuxi2.png",s="/assets/create-path.1s27M9pi.png",n="/assets/using-path.BZPI3yPf.png",r="/assets/using-ag-functions-templating.DcGFxBmZ.png",l="/assets/secrets-toolbox.CI4fqQn2.png",h="/assets/variables-toolbox.DMZMPcCR.png",u="/assets/task-preview.DPeqjFLk.png",d="/assets/filters.ByAcnOxU.png",T=JSON.parse('{"title":"Endpoint Tasks","description":"","frontmatter":{},"headers":[],"relativePath":"docs/endpoints/tasks.md","filePath":"docs/endpoints/tasks.md","lastUpdated":1751978440000}'),c={name:"docs/endpoints/tasks.md"},p=i('<h1 id="endpoint-tasks" tabindex="-1">Endpoint Tasks <a class="header-anchor" href="#endpoint-tasks" aria-label="Permalink to &quot;Endpoint Tasks&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>Tasks are the bread and butter of AireGlu Endpoints. There are a number of included Tasks you can use, or you can write your own <a href="/docs/advanced/adapters.html">adapters</a> to create custom tasks.</p><h3 id="http-request" tabindex="-1"><a href="./http-request.html">HTTP Request</a> <a class="header-anchor" href="#http-request" aria-label="Permalink to &quot;[HTTP Request](http-request)&quot;">​</a></h3><p>The HTTP Request task is used to communicate with external services. You can use this to send data to your APIs, or fetch data from other sources.</p><h3 id="http-response-handler" tabindex="-1"><a href="./http-response-handler.html">HTTP Response Handler</a> <a class="header-anchor" href="#http-response-handler" aria-label="Permalink to &quot;[HTTP Response Handler](http-response-handler)&quot;">​</a></h3><p>The Response Handler can only be used when linked to an HTTP Request. This handles what is returned from the request (e.g. the data from your API). You don&#39;t have to include this if you don&#39;t care about the result of your request, but more often than not the two come as a pair.</p><h3 id="mesh-message" tabindex="-1"><a href="./mesh-message.html">MESH Message</a> <a class="header-anchor" href="#mesh-message" aria-label="Permalink to &quot;[MESH Message](mesh-message)&quot;">​</a></h3><p>The MESH Message task lets you create and send mail via the MESH workflow system.</p><h3 id="email" tabindex="-1"><a href="./email.html">Email</a> <a class="header-anchor" href="#email" aria-label="Permalink to &quot;[Email](email)&quot;">​</a></h3><p>The Email task allows you to send an email. This can be sent from your own email servers, or from AireGlu&#39;s default email server.</p><h3 id="sms" tabindex="-1"><a href="./sms.html">SMS</a> <a class="header-anchor" href="#sms" aria-label="Permalink to &quot;[SMS](sms)&quot;">​</a></h3><p>The SMS task allows you to send text messages using either the MessageBird or GOV.UK notify services</p><h3 id="job" tabindex="-1"><a href="./job.html">Job</a> <a class="header-anchor" href="#job" aria-label="Permalink to &quot;[Job](job)&quot;">​</a></h3><p>The Job task allows an endpoint to be run at a specified time or interval, much like a scheduled task or cron job.</p><h3 id="fax" tabindex="-1"><a href="./fax.html">Fax</a> <a class="header-anchor" href="#fax" aria-label="Permalink to &quot;[Fax](fax)&quot;">​</a></h3><p>The Fax task allows you to send a message or PDF to a Fax machine. A PDF is required and can be part of your input data.</p><h3 id="http-response" tabindex="-1"><a href="./http-response.html">HTTP Response</a> <a class="header-anchor" href="#http-response" aria-label="Permalink to &quot;[HTTP Response](http-response)&quot;">​</a></h3><p>Lets you specify an HTTP response that the Endpoint should return as its result.</p><h3 id="http-redirect" tabindex="-1"><a href="./http-redirect.html">HTTP Redirect</a> <a class="header-anchor" href="#http-redirect" aria-label="Permalink to &quot;[HTTP Redirect](http-redirect)&quot;">​</a></h3><p>Lets you specify a redirection that should occur as the result of the Endpoint. Useful for sending the user to a &quot;Thank you&quot; page for instance.</p><h3 id="mapping" tabindex="-1"><a href="./mapping.html">Mapping</a> <a class="header-anchor" href="#mapping" aria-label="Permalink to &quot;[Mapping](mapping)&quot;">​</a></h3><p>The Mapping task is for data transformation. It can be used to reformat the data, or modify it in the pipeline. The output of this can be used in any subsequent tasks.</p><h3 id="pdf" tabindex="-1"><a href="./pdf.html">PDF</a> <a class="header-anchor" href="#pdf" aria-label="Permalink to &quot;[PDF](pdf)&quot;">​</a></h3><p>The PDF task lets you return a PDF document as the result of the Endpoint.</p><h3 id="jwt" tabindex="-1"><a href="./jwt.html">JWT</a> <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;[JWT](jwt)&quot;">​</a></h3><p>The JWT task allows you to generate a JWT with customisable headers &amp; payload, with a choice of encryption and/or signing algorithms.</p><h3 id="audit" tabindex="-1"><a href="./audit.html">Audit</a> <a class="header-anchor" href="#audit" aria-label="Permalink to &quot;[Audit](audit)&quot;">​</a></h3><p>The Audit task generates logs and sends them to AireAudit. To view these logs you can navigate to <a href="https://suite.aireinnovate.com/audit" target="_blank" rel="noreferrer">AireAudit</a>. Here you’ll be prompted to sign in, and once logged in, you’ll see a list of audit logs which you can apply filters on.</p><h1 id="task-configuration" tabindex="-1">Task Configuration <a class="header-anchor" href="#task-configuration" aria-label="Permalink to &quot;Task Configuration&quot;">​</a></h1><h1 id="context-data" tabindex="-1">Context Data <a class="header-anchor" href="#context-data" aria-label="Permalink to &quot;Context Data&quot;">​</a></h1><p>The Context Data panel is found on the left-hand side of mapping tasks and provides access to dynamic data, variables, functions, and secrets for building your endpoint logic.</p><ul><li><a href="#paths">Paths</a></li><li><a href="#functions">Functions</a></li><li><a href="#variables">Variables</a></li><li><a href="#secrets">Secrets</a></li></ul><h2 id="paths" tabindex="-1">Paths <a class="header-anchor" href="#paths" aria-label="Permalink to &quot;Paths&quot;">​</a></h2><p>Paths, provide access to the input data that was originally sent in to the endpoint, and the outputs of any Mapping tasks and from HTTP Response Handlers. Changing the <code>Data Origin</code> field allows you to choose between available data sets.</p><h4 id="data-tree-view" tabindex="-1">Data Tree View <a class="header-anchor" href="#data-tree-view" aria-label="Permalink to &quot;Data Tree View&quot;">​</a></h4><p>The default Data Tree tab displays your available data in an expandable tree structure:</p><ul><li><strong>Data Origin</strong>: Select between available data sets using the dropdown (e.g., &quot;Input&quot; for the original request data)</li><li><strong>Tree Navigation</strong>: Expand objects and arrays to explore the data structure</li><li><strong>Preview Values</strong>: Click the eye icon next to any field to see a preview of its value</li><li><strong>Insert Paths</strong>: Click the arrow icon to insert the JSON path into your mapping</li></ul><p><img src="'+o+'" alt="data tree"></p><h4 id="path-view" tabindex="-1">Path View <a class="header-anchor" href="#path-view" aria-label="Permalink to &quot;Path View&quot;">​</a></h4><p>Switch to the Path View tab to create custom path mappings:</p><ul><li><strong>Add Custom Paths</strong>: Enter a custom path key and specify the full JSON path (e.g., $.bookstore.socialMedia.instagram)</li><li><strong>Manage Paths</strong>: Edit or delete existing custom paths using the action icons</li><li><strong>Reusable Mappings</strong>: Custom paths appear in the &quot;Existing Paths&quot; list for easy reuse across your mapping</li></ul><p><img src="'+s+'" alt="data tree"></p><h4 id="using-paths" tabindex="-1">Using Paths <a class="header-anchor" href="#using-paths" aria-label="Permalink to &quot;Using Paths&quot;">​</a></h4><p>You can reference data in two ways:</p><ol><li><strong>Drag and Drop</strong>: Drag any field from the data tree directly to where you need it in your mapping</li><li><strong>Click to Insert</strong>: Click on your destination field, then click the arrow icon next to the desired data path to insert it</li></ol><p>All paths generate the appropriate JSON (or XPath if the data is in XMML format) path syntax automatically, making it easy to access nested data structures in your endpoint responses.</p><p><img src="'+n+'" alt="data tree"></p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><p>Functions, provide built-in AireGlu utilities for data transformation and processing. These functions can be used to perform common operations like encoding, date formatting, generating unique identifiers, and more. Use the search box at the top of the Functions panel to quickly find specific functions by name or functionality. Inserting Functions</p><h4 id="available-functions" tabindex="-1">Available Functions <a class="header-anchor" href="#available-functions" aria-label="Permalink to &quot;Available Functions&quot;">​</a></h4><p>The Functions panel includes a comprehensive library of built-in functions:</p><ul><li><strong>DateTime</strong>: Format dates using patterns like ddMMyyyyhhss</li><li><strong>UUID</strong>: Generate unique identifiers</li><li><strong>Random</strong>: Generate random numbers with customizable ranges (e.g., 1,10)</li><li><strong>OID</strong>: Generate object identifiers with custom prefixes (e.g., 225)</li><li><strong>Base64Encode</strong>: Encode strings or streams to Base64 format</li><li><strong>Base64Decode</strong>: Decode Base64 strings back to original format</li><li><strong>UrlEncode</strong>: URL-encode strings for safe transmission</li><li><strong>Raw</strong>: Pass through data without transformation</li><li><strong>JWT</strong>: Create JSON Web Tokens with RSA key signing</li></ul><h4 id="using-functions" tabindex="-1">Using Functions <a class="header-anchor" href="#using-functions" aria-label="Permalink to &quot;Using Functions&quot;">​</a></h4><p>Functions can be configured in two ways:</p><ol><li><strong>Hard-coded Values</strong>: Enter static values directly into the function parameters</li><li><strong>Dynamic Templates</strong>: Use paths, variables, or secrets as function inputs by templating them into the parameters</li></ol><h4 id="inserting-functions" tabindex="-1">Inserting Functions <a class="header-anchor" href="#inserting-functions" aria-label="Permalink to &quot;Inserting Functions&quot;">​</a></h4><ul><li><strong>Drag and Drop</strong>: Drag any function from the list directly to where you need it in your mapping</li><li><strong>Click to Insert</strong>: Click on your destination field, then click the arrow icon next to the desired function</li></ul><p>In the examples shown:</p><ul><li><em>Base64Encode</em>: Encoding content like --name-- (a templated path reference) into Base64 format</li><li><em>Templated Base64Encode</em>: Using <code>--AG:Base64Encode(--name--)--</code> to encode dynamic content from the name field</li></ul><p>The <a href="#preview">preview panel</a> shows the real-time execution of these functions, demonstrating how they transform your data in the actual endpoint output.</p><p><img src="'+r+'" alt="data tree"></p><h3 id="secrets" tabindex="-1">Secrets <a class="header-anchor" href="#secrets" aria-label="Permalink to &quot;Secrets&quot;">​</a></h3><p>Secrets, let you add private data to your requests. This data cannot be seen once created, so is suitable for things like authentication details. You can use these either by dragging the required field to the left hand side where you need it, or by clicking to the destination point and hitting the arrow. You can read more about Secrets <a href="./../getting-started/secrets.html">here</a>.</p><p>The panel includes a search function at the top to help you find specific secrets quickly.</p><p>Secrets are particularly useful for templating sensitive information into your endpoint configuration, such as:</p><ul><li>Authorization headers (as shown in the image with <code>Bearer --audit-bearer-key?--</code>)</li><li>API keys</li><li>Authentication tokens</li><li>Other credentials that shouldn&#39;t be hardcoded</li></ul><p>This approach keeps sensitive information secure while still allowing you to reference it in your endpoint configuration.</p><p>Using secrets instead of hardcoding sensitive values improves security and makes credential management more flexible within your Airglu workflows.</p><p><img src="'+l+'" alt="secrets use"></p><h3 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h3><p>Variables are tenant-wide settings that provide common data that can be reused across multiple endpoints. Unlike secrets, variables are visible and editable, so they should only contain non-sensitive information. You can use variables by either dragging them from the list to where you need them in your mapping, or by clicking on your destination field and then clicking the arrow icon next to the variable. You can read more about Variables <a href="./../getting-started/variables.html">here</a>.</p><p>The panel includes a search function at the top to help you find specific variables quickly. Each variable in the list has an arrow icon that allows you to insert it into your selected field.</p><p>This provides quick access to all variables that can be mapped into your endpoint configuration.</p><p><img src="'+h+'" alt="Editor"></p><h1 id="preview" tabindex="-1">Preview <a class="header-anchor" href="#preview" aria-label="Permalink to &quot;Preview&quot;">​</a></h1><p>The Preview panel on the right side shows you the output of your task. It can help you verify your mapping logic works correctly before saving your task. This collapsible panel can be toggled on and off using the &quot;Display Preview&quot; switch in the top-right corner.</p><p>The preview executes your mapping logic using sample data to show you exactly what your task output will look like. It processes:</p><ul><li><strong>Dynamic Data</strong>: References to input data and previous task outputs</li><li><strong>Function Execution</strong>: Real-time execution of AireGlu functions like UUID generation, date formatting, etc.</li><li><strong>Data Transformations</strong>: Any mapping, filtering, or transformation logic you&#39;ve configured</li></ul><h4 id="using-the-preview" tabindex="-1">Using the Preview <a class="header-anchor" href="#using-the-preview" aria-label="Permalink to &quot;Using the Preview&quot;">​</a></h4><ul><li><strong>Toggle Display</strong>: Use the &quot;Display Preview&quot; switch to show or hide the preview panel</li><li><strong>Validation</strong>: Click the &quot;Validate&quot; button to check for errors and refresh the preview</li><li><strong>Error Detection</strong>: Any issues with your mapping will be highlighted, requiring correction before the preview can display properly</li></ul><p>In the example shown, the preview demonstrates:</p><ul><li>The test property mapping from input data ($.name)</li><li>Live execution of the UUID function generating a real UUID value</li><li>The final JSON structure that will be output by this mapping task</li></ul><p><img src="'+u+'" alt="task preview"></p><h1 id="filters" tabindex="-1">Filters <a class="header-anchor" href="#filters" aria-label="Permalink to &quot;Filters&quot;">​</a></h1><p>Filters are used to look at available data, and determine if a task should run. It uses a <a href="https://goessner.net/articles/JsonPath" target="_blank" rel="noreferrer">JSONPath</a> expression that returns <code>true</code> or <code>false</code> to decide where to run the task, or skip it. You can add multiple filters to your task or you can choose to copy the filters of one task to another.</p><p><img src="'+d+'" alt="filters"></p>',87),g=[p];function f(m,b,y,k,w,q){return a(),t("div",null,g)}const v=e(c,[["render",f]]);export{T as __pageData,v as default};
