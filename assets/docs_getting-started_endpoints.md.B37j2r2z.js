import{_ as e,c as t,o as n,a4 as a}from"./chunks/framework.ttppV29E.js";const m=JSON.parse('{"title":"Endpoints","description":"","frontmatter":{},"headers":[],"relativePath":"docs/getting-started/endpoints.md","filePath":"docs/getting-started/endpoints.md","lastUpdated":1738246349000}'),i={name:"docs/getting-started/endpoints.md"},o=a(`<h1 id="endpoints" tabindex="-1">Endpoints <a class="header-anchor" href="#endpoints" aria-label="Permalink to &quot;Endpoints&quot;">​</a></h1><p>Endpoints define and shape the functionality that AireGlu provides. They are called by external applications, or other endpoints, and perform various tasks as configured. These can range from manipulating and shaping data, or sending an email, to generating a PDF, to contacting other external services. Custom tasks can also be created via the use of <a href="/docs/advanced/adapters.html">adapters</a>.</p><h2 id="creating-an-endpoint" tabindex="-1">Creating an Endpoint <a class="header-anchor" href="#creating-an-endpoint" aria-label="Permalink to &quot;Creating an Endpoint&quot;">​</a></h2><p>The <a href="./../getting-started/">Getting Started</a> page has a quick setup for a simple endpoint. You should check there for something simple. This guide will go more in depth about the various options available during creation.</p><p><code>Endpoint Name</code> is required, and forms part of the URL for the endpoint. If <code>glu.aireinnovate.com</code> is our AireGlu instance, and <code>airelogic</code> is our tenant, then our full endpoint URL would be <code>https://glu-api.aireinnovate.com/airelogic/ENDPOINT-NAME</code>. The name only allows letters, numbers and hyphens (<code>-</code>) to be used.</p><p><code>Group Name</code> is an optional field and does not affect how the endpoint runs. You can choose to add groups for your endpoints, and then on the endpoint page choose to see your endpoints within their groups. Any endpoints without a group will be shown in the <code>Ungrouped Endpoints</code> group</p><p><code>Error Email</code> is optional. It is used to report the following during endpoint execution:</p><ul><li>There was an input validation error</li><li>Running endpoint resulted in an AireGlu exception</li><li>The endpoint returned a non-success status code</li></ul><h3 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-label="Permalink to &quot;Authentication&quot;">​</a></h3><p>You can require authentication for your endpoint to limit availability and use. The following options are available for authentication:</p><ul><li>API Key</li><li>Internal Only</li><li>JWT</li><li>IP Address/Range</li><li>Basic Auth</li><li>Client Credentials</li></ul><p>If multiple authentication methods are defined, then <strong>ALL</strong> of them are required to pass in order to use an endpoint.</p><h4 id="api-key" tabindex="-1">API Key <a class="header-anchor" href="#api-key" aria-label="Permalink to &quot;API Key&quot;">​</a></h4><p>Choosing an API Key is probably the simplest way to add authentication. It allows you to choose a string of text (preferably random) that both AireGlu and the calling application know. This should then be passed in the <code>X-Api-Key</code> HTTP header on any incoming request. This can also be securely saved as a <a href="./secrets.html">Secret</a>.</p><h4 id="internal-only" tabindex="-1">Internal Only <a class="header-anchor" href="#internal-only" aria-label="Permalink to &quot;Internal Only&quot;">​</a></h4><p>Internal Only endpoints are accessible only to other endpoints, and cannot be called by external users or applications.</p><h4 id="jwt" tabindex="-1">JWT <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JWT&quot;">​</a></h4><p>JWT authentication allows for a more modern and secure approach to using Basic Auth, but also requires some more steps. A username and password are set, but before you can use the endpoint, you must first authenticate with it and receive the JWT token. This is then passed in the <code>Authorization</code> header on the actual calls to the endpoint.</p><p>In order to authenticate with the endpoint, you should make a <code>POST</code> request to <code>{ENDPOINT-URL}/Authenticate</code>, where <code>{ENDPOINT_URL}</code> is the <strong>full</strong> endpoint url, <strong>including a version number or environment</strong>. e.g. <code>https://glu-api.aireinnovate.com/airelogic/ENDPOINT-NAME/production/Authentication</code>. The body of this request should include the username and password as a JSON payload. This should look like:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Aladdin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;open seasame&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This will result in a JWT token being returned to you, and this should be included in the <code>Authorization</code> header as a Bearer token. This will look something like the following:<br><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code></p><p>The version you authenticate against does not need to be the same version you later call, but it does need to be the same endpoint name. For example, if you authenticate against version 1 of <code>send-email</code>, you can still use version 2 of <code>send-email</code>, but not version 1 of <code>save-document</code>. Additionally, you will be able to use the token multiple times before it expires.</p><p><em>Important</em> This token should be kept securely, since it functions as the key to your endpoint, and anyone with it can access the endpoint as if they had the username and password until it expires.</p><h4 id="ip-address-range" tabindex="-1">IP Address/Range <a class="header-anchor" href="#ip-address-range" aria-label="Permalink to &quot;IP Address/Range&quot;">​</a></h4><p>By limiting to an IP address or range will require the calling device to be on the defined IP. This can be a single IP address (e.g. <code>192.168.1.152</code>), a range (e.g. <code>192.168.1.10-192.168.50</code>), or a CIDR block (e.g. <code>192.168.1.0/24</code>). You can provide multiple sets for allowing different networks or specific devices to access the endpoint.</p><h4 id="basic-auth" tabindex="-1">Basic Auth <a class="header-anchor" href="#basic-auth" aria-label="Permalink to &quot;Basic Auth&quot;">​</a></h4><p>Basic Auth allows you to set a username and password required to use the endpoint. Once set, the password will not be viewable again for security reasons. These credentials should then be included in any endpoint calls using normal Basic Auth requirements. These are the <code>Authorization</code> header with a base64 version of the username and password separated by a single colon <code>:</code>.<br> For example, if you use <code>Aladdin</code> as the username and <code>open sesame</code> as the password, then the field&#39;s value is the Base64 encoding of <code>Aladdin:open sesame</code>, or <code>QWxhZGRpbjpvcGVuIHNlc2FtZQ==</code>. Then the Authorization header should be: <code>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</code></p><h4 id="client-credentials" tabindex="-1">Client Credentials <a class="header-anchor" href="#client-credentials" aria-label="Permalink to &quot;Client Credentials&quot;">​</a></h4><p>Client Credentials is a secure authentication method recommended for server-to-server communication. It&#39;s particularly useful for background services or automated tasks that operate independently of user sessions. This method involves the application authenticating itself with its own credentials (a client ID and client secret). Before your application can securely call an AireGlu endpoint using Client Credentials, it must first obtain an access token from AireGlu&#39;s authentication server, the client must specify the <code>AireGluRuntimeApi</code> scope. This token represents your application&#39;s authorization to access the specified resources. Include this token in the Authorization header as a Bearer token in all subsequent requests to the AireGlu endpoint. For example: <code>Authorization: Bearer {ACCESS_TOKEN}</code></p><p><strong>Note</strong>: Cross-tenant endpoint invocations are not permitted with client credentials authentication. The tenant key claim provided in the token must match the tenant key of the endpoint being invoked.</p><h3 id="tasks" tabindex="-1">Tasks <a class="header-anchor" href="#tasks" aria-label="Permalink to &quot;Tasks&quot;">​</a></h3><p>Tasks make up the meat of the Endpoint. They are responsible for the processing that goes on. <a href="/docs/endpoints/tasks.html">Tasks are covered in detail here.</a></p><p><code>Stop on Task Failure</code> allows you to stop running the endpoint when a task fails to complete successfully. If this is turned off, then it will ignore failed tasks, and continue to process each subsequent task. Be aware this may cause unpredictable behaviour or more failures if those tasks depend on the output of the failed task.</p><h2 id="importing-or-synchronising-an-endpoint" tabindex="-1">Importing or synchronising an Endpoint <a class="header-anchor" href="#importing-or-synchronising-an-endpoint" aria-label="Permalink to &quot;Importing or synchronising an Endpoint&quot;">​</a></h2><p>Endpoints can be managed by exporting them and saving them in a git repository then synchronising the repository within AireGlu [(/docs/getting-started/repositories#exporting-an-endpoint-config)]</p><p>You can also import an endpoint definition manually by:</p><ul><li>Going to the Endpoints page</li><li>Clicking on the three dots in the top right hand corner</li><li>Selecting Import Endpoint</li><li>Pasting the endpoint definition into the space provided and selecting Import</li></ul>`,37),s=[o];function r(d,l,h,c,p,u){return n(),t("div",null,s)}const f=e(i,[["render",r]]);export{m as __pageData,f as default};
